import { P2PPeer, BtcFundingInfo, FundingBtcCreated, FundingBtcSigned, OmniFundingAssetInfo, OmniSendAssetInfo, OpenChannelInfo, AcceptChannelInfo, AssetFundingCreatedInfo, AssetFundingSignedInfo, SignedInfo100100, SignedInfo100101, SignedInfo100102, SignedInfo100103, SignedInfo100104, SignedInfo100105, SignedInfo100106, SignedInfo100110, SignedInfo100111, SignedInfo100112, SignedInfo100113, SignedInfo100114, SignedInfo100360, SignedInfo100361, SignedInfo100362, SignedInfo100363, SignedInfo100364, SignedInfo101035, SignedInfo101134, CommitmentTx, CommitmentTxSigned, InvoiceInfo, HTLCFindPathInfo, addHTLCInfo, HtlcSignedInfo, ForwardRInfo, SignRInfo, CloseHtlcTxInfo, CloseHtlcTxInfoSigned, IssueFixedAmountInfo, IssueManagedAmoutInfo, OmniSendGrant, OmniSendRevoke, CloseChannelSign, AtomicSwapAccepted, AtomicSwapRequest } from "./pojo";
export default class ObdApi {
    constructor({ url }?: {
        url?: string | undefined;
    });
    private isConnectedToOBD;
    private isLoggedIn;
    private messageType;
    private ws;
    private defaultUrl;
    private globalCallback;
    private callbackMap;
    private onMessage;
    onChannelOpenAttempt: Function | undefined;
    onBitcoinFundingCreated: Function | undefined;
    onChannelClose: Function | undefined;
    onAssetFundingCreated: Function | undefined;
    loginData: {
        nodeAddress: string;
        nodePeerId: string;
        userPeerId: string;
    };
    failure(data: any): {
        error: boolean;
        data: string | Object;
    };
    success(data: any): {
        error: boolean;
        data: string | Object;
    };
    connect({ url, onOpen, onMessage, onChannelOpenAttempt, onBitcoinFundingCreated, onAssetFundingCreated, onChannelClose, onError, onClose, onAddHTLC, onForwardR, onSignR, onCloseHTLC }?: {
        url?: string | undefined;
        onOpen?: (() => any) | undefined;
        onMessage?: undefined;
        onChannelOpenAttempt?: undefined;
        onBitcoinFundingCreated?: undefined;
        onAssetFundingCreated?: undefined;
        onChannelClose?: undefined;
        onError?: ((e: string | object) => any) | undefined;
        onClose?: ((code: number, reason: string) => any) | undefined;
        onAddHTLC?: (() => null) | undefined;
        onForwardR?: (() => null) | undefined;
        onSignR?: (() => null) | undefined;
        onCloseHTLC?: (() => null) | undefined;
    }): Promise<{
        error: boolean;
        data: string | Object;
    }>;
    registerEvent(msgType: number, callback: Function): void;
    removeEvent(msgType: number): void;
    sendJsonData(msg: string, type: number, callback: Function): void;
    connectToServer(url: string, callback: Function, globalCallback: Function): void;
    private sendData;
    private getDataFromServer;
    logIn(mnemonic: string, callback: Function): void;
    userPeerId: string;
    onLogIn(resultData: any): void;
    disconnect(): void;
    logout(callback: Function): void;
    onLogout(jsonData: any): void;
    connectPeer(info: P2PPeer, callback: Function): void;
    fundingBitcoin(info: BtcFundingInfo, callback: Function): void;
    onFundingBitcoin(jsonData: any): void;
    bitcoinFundingCreated(recipient_node_peer_id: string, recipient_user_peer_id: string, info: FundingBtcCreated, callback: Function): void;
    sendSignedHex100341(recipient_node_peer_id: string, recipient_user_peer_id: string, signed_hex: string, callback: Function): void;
    bitcoinFundingSigned(recipient_node_peer_id: string, recipient_user_peer_id: string, info: FundingBtcSigned, callback: Function): any;
    listProperties(callback: Function): void;
    onListProperties(jsonData: any): void;
    fundingAsset(info: OmniFundingAssetInfo, callback: Function): any;
    onFundingAsset(jsonData: any): void;
    sendAsset(info: OmniSendAssetInfo, callback: Function): any;
    onSendAsset(jsonData: any): void;
    genAddressFromMnemonic(callback: Function): void;
    onGenAddressFromMnemonic(jsonData: any): void;
    getAddressInfo(index: number, callback: Function): any;
    onGetAddressInfo(jsonData: any): void;
    openChannel(recipient_node_peer_id: string, recipient_user_peer_id: string, info: OpenChannelInfo, callback: Function): any;
    onOpenChannel(jsonData: any): void;
    acceptChannel(recipient_node_peer_id: string, recipient_user_peer_id: string, info: AcceptChannelInfo, callback: Function): any;
    onAcceptChannel(jsonData: any): void;
    checkChannelAddessExist(recipient_node_peer_id: string, recipient_user_peer_id: string, info: AcceptChannelInfo, callback: Function): any;
    onCheckChannelAddessExist(jsonData: any): void;
    assetFundingCreated(recipient_node_peer_id: string, recipient_user_peer_id: string, info: AssetFundingCreatedInfo, callback: Function): any;
    sendSignedHex101034(recipient_node_peer_id: string, recipient_user_peer_id: string, signed_hex: string, callback: Function): any;
    sendSignedHex101134(info: SignedInfo101134, callback: Function): any;
    assetFundingSigned(recipient_node_peer_id: string, recipient_user_peer_id: string, info: AssetFundingSignedInfo, callback: Function): any;
    onAssetFundingSigned(jsonData: any): void;
    sendSignedHex101035(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo101035, callback: Function): any;
    commitmentTransactionCreated(recipient_node_peer_id: string, recipient_user_peer_id: string, info: CommitmentTx, callback: Function): any;
    onCommitmentTransactionCreated(jsonData: any): void;
    sendSignedHex100360(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100360, callback: Function): any;
    commitmentTransactionAccepted(recipient_node_peer_id: string, recipient_user_peer_id: string, info: CommitmentTxSigned, callback: Function): any;
    onCommitmentTransactionAccepted(jsonData: any): void;
    sendSignedHex100361(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100361, callback: Function): any;
    sendSignedHex100362(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100362, callback: Function): any;
    sendSignedHex100363(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100363, callback: Function): any;
    sendSignedHex100364(info: SignedInfo100364, callback: Function): any;
    addInvoice(info: InvoiceInfo, callback: Function): any;
    onAddInvoice(jsonData: any): void;
    HTLCFindPath(info: HTLCFindPathInfo, callback: Function): any;
    onHTLCFindPath(jsonData: any): void;
    addHTLC(recipient_node_peer_id: string, recipient_user_peer_id: string, info: addHTLCInfo, callback: Function): any;
    onAddHTLC(jsonData: any): void;
    sendSignedHex100100(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100100, callback: Function): any;
    sendSignedHex100101(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100101, callback: Function): any;
    sendSignedHex100102(info: SignedInfo100102, callback: Function): any;
    sendSignedHex100103(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100103, callback: Function): any;
    sendSignedHex100104(info: SignedInfo100104, callback: Function): any;
    sendSignedHex100105(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100105, callback: Function): any;
    sendSignedHex100106(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100106, callback: Function): any;
    sendSignedHex100110(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100110, callback: Function): any;
    sendSignedHex100111(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100111, callback: Function): any;
    sendSignedHex100112(info: SignedInfo100112, callback: Function): any;
    sendSignedHex100113(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignedInfo100113, callback: Function): any;
    sendSignedHex100114(info: SignedInfo100114, callback: Function): any;
    htlcSigned(recipient_node_peer_id: string, recipient_user_peer_id: string, info: HtlcSignedInfo, callback: Function): any;
    onHtlcSigned(jsonData: any): void;
    forwardR(recipient_node_peer_id: string, recipient_user_peer_id: string, info: ForwardRInfo, callback: Function): any;
    onForwardR(jsonData: any): void;
    signR(recipient_node_peer_id: string, recipient_user_peer_id: string, info: SignRInfo, callback: Function): any;
    onSignR(jsonData: any): void;
    closeHTLC(recipient_node_peer_id: string, recipient_user_peer_id: string, info: CloseHtlcTxInfo, callback: Function): any;
    onCloseHTLC(jsonData: any): void;
    closeHTLCSigned(recipient_node_peer_id: string, recipient_user_peer_id: string, info: CloseHtlcTxInfoSigned, callback: Function): any;
    onCloseHTLCSigned(jsonData: any): void;
    getTransaction(txid: string, callback: Function): any;
    onGetTransaction(jsonData: any): void;
    issueFixedAmount(info: IssueFixedAmountInfo, callback: Function): any;
    onIssueFixedAmount(jsonData: any): void;
    issueManagedAmout(info: IssueManagedAmoutInfo, callback: Function): any;
    onIssueManagedAmout(jsonData: any): void;
    sendGrant(info: OmniSendGrant, callback: Function): any;
    onSendGrant(jsonData: any): void;
    sendRevoke(info: OmniSendRevoke, callback: Function): any;
    onSendRevoke(jsonData: any): void;
    getAllBalancesForAddress(address: string, callback: Function): any;
    onGetAllBalancesForAddress(jsonData: any): void;
    getProperty(propertyId: string, callback: Function): any;
    onGetProperty(jsonData: any): void;
    getBtcBalanceByAddress(address: string, callback: Function): any;
    onGetBtcBalanceByAddress(jsonData: any): void;
    importPrivKey(privkey: string, callback: Function): any;
    onImportPrivKey(jsonData: any): void;
    getAddHTLCRandHInfoList(callback: Function): void;
    onGetAddHTLCRandHInfoList(jsonData: any): void;
    getHtlcSignedRandHInfoList(callback: Function): void;
    onGetHtlcSignedRandHInfoList(jsonData: any): void;
    getRFromCommitmentTx(channel_id: string, callback: Function): any;
    onGetRFromCommitmentTx(jsonData: any): void;
    getPathInfoByH(h: string, callback: Function): any;
    onGetPathInfoByH(jsonData: any): void;
    getRByHOfReceiver(h: string, callback: Function): any;
    onGetRByHOfReceiver(jsonData: any): void;
    getLatestCommitmentTransaction(channel_id: string, callback: Function): any;
    onGetLatestCommitmentTransaction(jsonData: any): void;
    getItemsByChannelId(channel_id: string, callback: Function): any;
    onGetItemsByChannelId(jsonData: any): void;
    getMyChannels(page_size: Number, page_index: Number, callback: Function): void;
    onGetMyChannels(jsonData: any): void;
    getAmountOfRechargeBTC(callback: Function): void;
    onGetAmountOfRechargeBTC(jsonData: any): void;
    getChannelDetailFromChannelID(channel_id: string, callback: Function): any;
    onGetChannelDetailFromChannelID(jsonData: any): void;
    getChannelDetailFromDatabaseID(id: number, callback: Function): any;
    onGetChannelDetailFromDatabaseID(jsonData: any): void;
    getAllBreachRemedyTransactions(channel_id: string, callback: Function): any;
    onGetAllBreachRemedyTransactions(jsonData: any): void;
    getAllCommitmentTx(channel_id: string, callback: Function): any;
    onGetAllCommitmentTx(jsonData: any): void;
    getLatestRevockableDeliveryTransaction(channel_id: string, callback: Function): any;
    onGetLatestRevockableDeliveryTransaction(jsonData: any): void;
    getLatestBreachRemedyTransaction(channel_id: string, callback: Function): any;
    onGetLatestBreachRemedyTransaction(jsonData: any): void;
    sendSomeCommitmentById(id: number, callback: Function): any;
    onSendSomeCommitmentById(jsonData: any): void;
    getAllRevockableDeliveryTransactions(channel_id: string, callback: Function): any;
    onGetAllRevockableDeliveryTransactions(jsonData: any): void;
    closeChannel(recipient_node_peer_id: string, recipient_user_peer_id: string, channel_id: string, callback: Function): any;
    onCloseChannel(jsonData: any): void;
    closeChannelSigned(recipient_node_peer_id: string, recipient_user_peer_id: string, info: CloseChannelSign, callback: Function): any;
    onCloseChannelSigned(jsonData: any): void;
    atomicSwap(recipient_node_peer_id: string, recipient_user_peer_id: string, info: AtomicSwapRequest, callback: Function): any;
    atomicSwapAccepted(recipient_node_peer_id: string, recipient_user_peer_id: string, info: AtomicSwapAccepted, callback: Function): any;
    private isNotString;
}
